package ${applicationId}.datasource.database

import androidx.room.Database
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import androidx.room.Room
import ${applicationId}.core.ApplicationClass
import ${applicationId}.datasource.database.converter.DateConverter
import ${applicationId}.datasource.database.entity.*
import ${applicationId}.datasource.database.dao.*

@Database(entities = [
    #foreach($EntityName in ${entities})
        ${EntityName}::class #if($foreach.hasNext),
        #end
    #end
],
 version = 1,exportSchema = false)
@TypeConverters(DateConverter::class)
abstract class AppDatabase : RoomDatabase() {

    companion object {
        const val DB_NAME = "${app_db_name}"
        private var mAppDatabase: AppDatabase? = null

        private fun provideDatabase(): AppDatabase {
                if (mAppDatabase == null) {
                    mAppDatabase = Room.databaseBuilder(ApplicationClass.appContext,
                            AppDatabase::class.java, DB_NAME)
                            .fallbackToDestructiveMigration()
                            .build()
                }
                return mAppDatabase as AppDatabase
            }

            fun getInstance(): AppDatabase {
                return mAppDatabase ?: synchronized(this) {
                    mAppDatabase ?: provideDatabase().also { mAppDatabase = it }
                }
            }

    }

    #foreach($EntityName in ${dao})
        abstract fun get${EntityName}Dao(): ${EntityName}Dao
    #end
}
