package ${applicationId}.view.${component}

import android.app.Application
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentManager
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import ${applicationId}.R
import ${applicationId}.core.AppExecutors
import ${applicationId}.core.Injection
import ${applicationId}.datasource.repository.${RepositoryName}
#if($GenerateRV)
import ${applicationId}.datasource.database.entity.${EntityName}
#end
import ${applicationId}.datasource.repository.impl.${RepositoryImplName}
import ${applicationId}.utility.ActivityUtils
import ${applicationId}.vo.Resource

class ${ClassName}(application: Application) : AndroidViewModel(application) {

    private var mFragment: String? = null
    private var mFragmentManager: FragmentManager? = null
    private var mActiveFragment: Fragment? = null
    private val mAppExecutors: AppExecutors = Injection.provideAppExecutors()
    private val mApplication: Application = application
    private val mRepository: ${RepositoryName}

    init {
        mRepository = ${RepositoryImplName}.getInstance(application, mAppExecutors)
    }

    fun initFragmentManager(fragmentManager: FragmentManager) {
        mFragmentManager = fragmentManager
    }

    fun navigateToChildFragment(fragment: Fragment) {
        if (mActiveFragment != null &&
                mActiveFragment!!::class.simpleName.equals(fragment::class.simpleName)) {
            return
        }
        ActivityUtils.addFragmentToContentContainer(mFragmentManager!!, fragment
                , R.id.fragment_container, fragment::class.simpleName!!)
        mFragment = fragment::class.simpleName
    }
    #if($GenerateRV)
    fun getAll${EntityName}(): LiveData<Resource<List<${EntityName}>>> {
        return mRepository.getAll${EntityName}()
    }

    fun create${EntityName}(obj: ${EntityName}):LiveData<Resource<${EntityName}>>{
        return mRepository.create${EntityName}(obj)
    }

    fun update${EntityName}(obj: ${EntityName}):LiveData<Resource<${EntityName}>>{
        return mRepository.update${EntityName}(obj)
    }

    fun delete${EntityName}(obj: ${EntityName}):LiveData<Resource<Boolean>>{
        return mRepository.delete${EntityName}(obj)
    }
    #end
}
