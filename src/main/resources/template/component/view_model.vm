package ${applicationId}.view.${component}

import android.app.Application
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentManager
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.Transformations
import ${applicationId}.R
import ${applicationId}.core.AppExecutors
import ${applicationId}.core.Injection
import ${applicationId}.datasource.repository.${RepositoryName}
import ${applicationId}.datasource.repository.impl.${RepositoryImplName}
import ${applicationId}.utility.ActivityUtils
import ${applicationId}.vo.Resource

class ${ClassName}(application: Application) : AndroidViewModel(application) {

    private var mFragment: String? = null
    private var mFragmentManager: FragmentManager? = null
    private var mActiveFragment: Fragment? = null
    private val mAppExecutors: AppExecutors
    private val mApplication: Application
    private var mTrueLiveData: MutableLiveData<Boolean> = MutableLiveData()
    private var mPerformOperation: LiveData<Resource<Any>> = MutableLiveData()
    private val mRepository: ${RepositoryName}

    init {
        mTrueLiveData.value = true
        mApplication = application
        mAppExecutors = Injection.provideAppExecutors()
        mRepository = ${RepositoryImplName}.getInstance(application, mAppExecutors)
    }

    fun initFragmentManager(fragmentManager: FragmentManager) {
        mFragmentManager = checkNotNull(fragmentManager)
    }

    fun navigateToChildFragment(fragment: Fragment) {
        if (mActiveFragment != null &&
                mActiveFragment!!::class.simpleName.equals(fragment::class.simpleName)) {
            return
        }
        ActivityUtils.addFragmentToContentContainer(mFragmentManager!!, fragment
                , R.id.fragment_container, fragment::class.simpleName!!)
        mFragment = fragment::class.simpleName
    }

    fun initLiveData() {
        mPerformOperation = Transformations.switchMap(mTrueLiveData){
            mRepository.doSomething(null)
        }
    }

    fun doOperation(): LiveData<Resource<Any>> {
        return mPerformOperation;
    }
}
